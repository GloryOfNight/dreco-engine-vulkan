cmake_minimum_required(VERSION 3.19.0)
project(dreco)

find_package(Vulkan REQUIRED)
find_package(SDL2 REQUIRED)
find_package(glm REQUIRED)

file(GLOB_RECURSE DRECO_SOURCE_FILES ${CMAKE_SOURCE_DIR}/src/*.cxx)
file(GLOB_RECURSE DRECO_HEADER_FILES ${CMAKE_SOURCE_DIR}/src/*.hxx)

add_library(${PROJECT_NAME} SHARED ${DRECO_SOURCE_FILES} ${DRECO_HEADER_FILES})

target_link_libraries(${PROJECT_NAME} PRIVATE ${Vulkan_LIBRARY} ${SDL2_LIBRARIES})
target_include_directories(${PROJECT_NAME} PRIVATE ${Vulkan_INCLUDE_DIR} ${SDL2_INCLUDE_DIRS} ${GLM_INCLUDE_DIRS})

set_target_properties(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED YES
    CXX_EXTENSIONS NO
    EXPORT_COMPILE_COMMANDS TRUE
)

target_include_directories(${PROJECT_NAME} PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/src/)
include_directories("thirdparty")

set(DRECO_ASSETS_DIR "assets")
set(DRECO_SHADERS_SOURCE_DIR "shaders/src")
set(DRECO_SHADERS_BINARY_DIR "shaders")

target_compile_definitions(${PROJECT_NAME} PUBLIC 
-DDRECO_ASSETS_DIR="${DRECO_ASSETS_DIR}"
-DDRECO_SHADERS_SOURCE_DIR="${DRECO_SHADERS_SOURCE_DIR}"
-DDRECO_SHADERS_BINARY_DIR="${DRECO_SHADERS_BINARY_DIR}")

if(MSVC)
target_compile_definitions(${PROJECT_NAME} PRIVATE -DDRECO_DECLSPEC=__declspec(dllexport) -D_USE_MATH_DEFINES)
else()
target_compile_definitions(${PROJECT_NAME} PRIVATE -DDRECO_DECLSPEC=)
endif()

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
if (NOT DEFINED CMAKE_INSTALL_RPATH)
set(CMAKE_INSTALL_RPATH "${CMAKE_CURRENT_LIST_DIR}/install")
endif()

add_subdirectory(launcher)

include(tools/tools.cmake)

install(FILES ${SHADER_BINARY_FILES} DESTINATION ${CMAKE_INSTALL_RPATH}/${DRECO_SHADERS_BINARY_DIR})
install(DIRECTORY ${DRECO_ASSETS_DIR} DESTINATION ${CMAKE_INSTALL_RPATH})

install(TARGETS dreco dreco-launcher
        RUNTIME DESTINATION ${CMAKE_INSTALL_RPATH}
        LIBRARY DESTINATION ${CMAKE_INSTALL_RPATH})

## Copy dll dependencies
if (MSVC)
# Locate SDL2.dll
if(CMAKE_SIZEOF_VOID_P EQUAL 8) 
	set(PATH_SUFFIXES lib64 lib/x64 lib bin)
else() 
	set(PATH_SUFFIXES lib/x86 lib bin)
endif()
find_path(SDL2_DLL_PATH SDL2.dll
HINTS $ENV{SDL2_DIR}
PATH_SUFFIXES ${PATH_SUFFIXES})

set(SDL2_DLL "${SDL2_DLL_PATH}/SDL2.dll")

# Copy SDL2.dll to binary directory 
get_property(IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if (IS_MULTI_CONFIG)
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} 
-E copy_if_different "${SDL2_DLL}" "${PROJECT_BINARY_DIR}/$<CONFIG>")
else()
file(COPY ${SDL2_DLL} DESTINATION ${PROJECT_BINARY_DIR})
endif()

install(FILES ${SDL2_DLL} DESTINATION ${CMAKE_INSTALL_RPATH})
endif()